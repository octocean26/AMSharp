
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_LayoutEmpty.cshtml";
}
@model OctOceanAMModules.Models.AuthorityViewModel

@section HeadScripts{
    <link href="~/lib/zTree/css/zTreeStyle/zTreeStyle.css" rel="stylesheet" />

    <script src="~/lib/zTree/js/jquery.ztree.core.min.js"></script>
    <script src="~/lib/zTree/js/jquery.ztree.excheck.min.js"></script>
}
    <div style="padding:20px;">
        <form method="post">
            <input type="hidden" id="hfallauthoritydata" value="@Model.AllAuthorityData" />
            <input type="hidden" id="hfRoleId" name="roleId" value="@Model.RoleId" />

            <div style="height:370px; border:1px solid #e1dddd; overflow-y:auto;">
                <ul id="treeDemo" class="ztree"></ul>

            </div>

            <div style="text-align:center; padding-top:10px;">

                <input type="hidden" id="checkedData" name="checkedData" />
                <button class="layui-btn layui-btn-green layui-btn-sm" type="button" id="btnSave"><i class="layui-icon">&#xe609;</i>保存</button>



            </div>

        </form>
    </div>
@section BottomScripts{
    <script>

        var allauthoritydata = JSON.parse($('#hfallauthoritydata').val());






        var zTreeObj;
        // zTree 的参数配置，深入使用请参考 API 文档（setting 配置详解）
        var setting = {
            check: {
                enable: true,
                autoCheckTrigger: false, //否触发 beforeCheck / onCheck 事件回调函数
                chkStyle: "checkbox",
                chkboxType: { "Y": "ps", "N": "ps" }
            },
            callback: {

                beforeCheck: function (treeId, treeNode) {
                    //捕获 勾选 或 取消勾选 之前的事件回调函数，并且根据返回值确定是否允许 勾选 或 取消勾选
                    return true;
                },
                onCheck: function (event, treeId, treeNode) {
                    //用于捕获 checkbox / radio 被勾选 或 取消勾选的事件回调函数
                    //如果设置了 setting.callback.beforeCheck 方法，且返回 false，将无法触发 onCheck 事件回调函数。

                }

            },
            data: {
                simpleData: {
                    enable: true,
                    idKey: "id",
                    pIdKey: "pId",
                    rootPId: 0
                }
            },
            view: {
                nameIsHTML: true
            }


        };
        // zTree 的数据属性，深入使用请参考 API 文档（zTreeNode 节点数据详解）
        var zNodes = allauthoritydata;


        $(document).ready(function () {
            zTreeObj = $.fn.zTree.init($("#treeDemo"), setting, zNodes);



            $('#btnSave').click(function () {

                var nodes = zTreeObj.getCheckedNodes(true);


                var data = [];
                for (var i in nodes) {
                    data.push({
                        Id: nodes[i].id,
                        FunId: nodes[i].funId,
                        PId: nodes[i].pId,
                        IsFun: nodes[i].isFun,
                        IsFunPage: nodes[i].isFunPage,
                        Name:nodes[i].name
                    });

                }


                //console.log(nodes);

                //console.log(JSON.stringify(data));


                $.post("/Authority/Index", {
                    checkedData: JSON.stringify(data),
                    roleId: $('#hfRoleId').val()

                }, function (rd) {
                    
                    console.log(rd);
                    if (rd.status) {
                        layer.alert('操作完成！', { icon: 1 }, function () {
                            //假设这是iframe页
                            var index = parent.layer.getFrameIndex(window.name); //先得到当前iframe层的索引
                            parent.layer.close(index); //再执行关闭

                        });

                    }
                    else {
                        layer.alert('更新失败！', { icon: 5 });

                    }


                 }, "json"); 
            });

        });



    </script>
}